// Control Voltage over gRPC (Protobuf trough HTTP/2
// (c) 2020 by DatanoiseTV - https://github.com/DatanoiseTV

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: cvnetv2.proto

package cvnet2

import (
	context "context"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConfigMessage_Mode int32

const (
	ConfigMessage_CV_IN    ConfigMessage_Mode = 0
	ConfigMessage_CV_OUT   ConfigMessage_Mode = 1
	ConfigMessage_GATE_IN  ConfigMessage_Mode = 2
	ConfigMessage_GATE_OUT ConfigMessage_Mode = 3
)

// Enum value maps for ConfigMessage_Mode.
var (
	ConfigMessage_Mode_name = map[int32]string{
		0: "CV_IN",
		1: "CV_OUT",
		2: "GATE_IN",
		3: "GATE_OUT",
	}
	ConfigMessage_Mode_value = map[string]int32{
		"CV_IN":    0,
		"CV_OUT":   1,
		"GATE_IN":  2,
		"GATE_OUT": 3,
	}
)

func (x ConfigMessage_Mode) Enum() *ConfigMessage_Mode {
	p := new(ConfigMessage_Mode)
	*p = x
	return p
}

func (x ConfigMessage_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigMessage_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_cvnetv2_proto_enumTypes[0].Descriptor()
}

func (ConfigMessage_Mode) Type() protoreflect.EnumType {
	return &file_cvnetv2_proto_enumTypes[0]
}

func (x ConfigMessage_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigMessage_Mode.Descriptor instead.
func (ConfigMessage_Mode) EnumDescriptor() ([]byte, []int) {
	return file_cvnetv2_proto_rawDescGZIP(), []int{2, 0}
}

type ConfigMessage_Range int32

const (
	ConfigMessage_ZERO_TO_FIVE     ConfigMessage_Range = 0
	ConfigMessage_ZERO_TO_TEN      ConfigMessage_Range = 1
	ConfigMessage_NEG_FIVE_TO_FIVE ConfigMessage_Range = 2
)

// Enum value maps for ConfigMessage_Range.
var (
	ConfigMessage_Range_name = map[int32]string{
		0: "ZERO_TO_FIVE",
		1: "ZERO_TO_TEN",
		2: "NEG_FIVE_TO_FIVE",
	}
	ConfigMessage_Range_value = map[string]int32{
		"ZERO_TO_FIVE":     0,
		"ZERO_TO_TEN":      1,
		"NEG_FIVE_TO_FIVE": 2,
	}
)

func (x ConfigMessage_Range) Enum() *ConfigMessage_Range {
	p := new(ConfigMessage_Range)
	*p = x
	return p
}

func (x ConfigMessage_Range) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigMessage_Range) Descriptor() protoreflect.EnumDescriptor {
	return file_cvnetv2_proto_enumTypes[1].Descriptor()
}

func (ConfigMessage_Range) Type() protoreflect.EnumType {
	return &file_cvnetv2_proto_enumTypes[1]
}

func (x ConfigMessage_Range) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigMessage_Range.Descriptor instead.
func (ConfigMessage_Range) EnumDescriptor() ([]byte, []int) {
	return file_cvnetv2_proto_rawDescGZIP(), []int{2, 1}
}

type CVMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel   uint32               `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Value     float32              `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *CVMessage) Reset() {
	*x = CVMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cvnetv2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVMessage) ProtoMessage() {}

func (x *CVMessage) ProtoReflect() protoreflect.Message {
	mi := &file_cvnetv2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVMessage.ProtoReflect.Descriptor instead.
func (*CVMessage) Descriptor() ([]byte, []int) {
	return file_cvnetv2_proto_rawDescGZIP(), []int{0}
}

func (x *CVMessage) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *CVMessage) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *CVMessage) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type GateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel   uint32               `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Value     bool                 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Length    float32              `protobuf:"fixed32,3,opt,name=length,proto3" json:"length,omitempty"`
	Timestamp *timestamp.Timestamp `protobuf:"bytes,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *GateMessage) Reset() {
	*x = GateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cvnetv2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GateMessage) ProtoMessage() {}

func (x *GateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_cvnetv2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GateMessage.ProtoReflect.Descriptor instead.
func (*GateMessage) Descriptor() ([]byte, []int) {
	return file_cvnetv2_proto_rawDescGZIP(), []int{1}
}

func (x *GateMessage) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *GateMessage) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

func (x *GateMessage) GetLength() float32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *GateMessage) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type ConfigMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel uint32              `protobuf:"varint,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Mode    ConfigMessage_Mode  `protobuf:"varint,2,opt,name=mode,proto3,enum=cvnet2.ConfigMessage_Mode" json:"mode,omitempty"`
	Range   ConfigMessage_Range `protobuf:"varint,3,opt,name=range,proto3,enum=cvnet2.ConfigMessage_Range" json:"range,omitempty"`
}

func (x *ConfigMessage) Reset() {
	*x = ConfigMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cvnetv2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMessage) ProtoMessage() {}

func (x *ConfigMessage) ProtoReflect() protoreflect.Message {
	mi := &file_cvnetv2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMessage.ProtoReflect.Descriptor instead.
func (*ConfigMessage) Descriptor() ([]byte, []int) {
	return file_cvnetv2_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigMessage) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *ConfigMessage) GetMode() ConfigMessage_Mode {
	if x != nil {
		return x.Mode
	}
	return ConfigMessage_CV_IN
}

func (x *ConfigMessage) GetRange() ConfigMessage_Range {
	if x != nil {
		return x.Range
	}
	return ConfigMessage_ZERO_TO_FIVE
}

var File_cvnetv2_proto protoreflect.FileDescriptor

var file_cvnetv2_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x76, 0x6e, 0x65, 0x74, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x63, 0x76, 0x6e, 0x65, 0x74, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x75, 0x0a, 0x09, 0x43, 0x56, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x8f, 0x01, 0x0a, 0x0b, 0x47, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x88, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2e, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x76,
	0x6e, 0x65, 0x74, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63,
	0x76, 0x6e, 0x65, 0x74, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x22, 0x38, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x56, 0x5f, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x56, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x47, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x22, 0x40, 0x0a, 0x05, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x54, 0x4f, 0x5f, 0x46,
	0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x54, 0x4f,
	0x5f, 0x54, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x45, 0x47, 0x5f, 0x46, 0x49,
	0x56, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x46, 0x49, 0x56, 0x45, 0x10, 0x02, 0x32, 0x8b, 0x04, 0x0a,
	0x02, 0x43, 0x56, 0x12, 0x39, 0x0a, 0x07, 0x50, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x15,
	0x2e, 0x63, 0x76, 0x6e, 0x65, 0x74, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x63, 0x76, 0x6e, 0x65, 0x74, 0x32, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x30,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x64, 0x43, 0x56, 0x12, 0x11, 0x2e, 0x63, 0x76, 0x6e, 0x65, 0x74,
	0x32, 0x2e, 0x43, 0x56, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x11, 0x2e, 0x63, 0x76,
	0x6e, 0x65, 0x74, 0x32, 0x2e, 0x43, 0x56, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x31, 0x0a, 0x07, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x56, 0x12, 0x11, 0x2e, 0x63, 0x76,
	0x6e, 0x65, 0x74, 0x32, 0x2e, 0x43, 0x56, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x11,
	0x2e, 0x63, 0x76, 0x6e, 0x65, 0x74, 0x32, 0x2e, 0x43, 0x56, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x47, 0x61, 0x74, 0x65, 0x12,
	0x13, 0x2e, 0x63, 0x76, 0x6e, 0x65, 0x74, 0x32, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x63, 0x76, 0x6e, 0x65, 0x74, 0x32, 0x2e, 0x47, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x09, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x63, 0x76, 0x6e, 0x65, 0x74,
	0x32, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e,
	0x63, 0x76, 0x6e, 0x65, 0x74, 0x32, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x43, 0x56, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x11, 0x2e, 0x63, 0x76, 0x6e, 0x65, 0x74, 0x32, 0x2e, 0x43, 0x56,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x11, 0x2e, 0x63, 0x76, 0x6e, 0x65, 0x74, 0x32,
	0x2e, 0x43, 0x56, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x39,
	0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x56, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x11, 0x2e, 0x63, 0x76, 0x6e, 0x65, 0x74, 0x32, 0x2e, 0x43, 0x56, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x11, 0x2e, 0x63, 0x76, 0x6e, 0x65, 0x74, 0x32, 0x2e, 0x43, 0x56, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x61,
	0x64, 0x47, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x13, 0x2e, 0x63, 0x76,
	0x6e, 0x65, 0x74, 0x32, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x13, 0x2e, 0x63, 0x76, 0x6e, 0x65, 0x74, 0x32, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x13, 0x2e, 0x63,
	0x76, 0x6e, 0x65, 0x74, 0x32, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x13, 0x2e, 0x63, 0x76, 0x6e, 0x65, 0x74, 0x32, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_cvnetv2_proto_rawDescOnce sync.Once
	file_cvnetv2_proto_rawDescData = file_cvnetv2_proto_rawDesc
)

func file_cvnetv2_proto_rawDescGZIP() []byte {
	file_cvnetv2_proto_rawDescOnce.Do(func() {
		file_cvnetv2_proto_rawDescData = protoimpl.X.CompressGZIP(file_cvnetv2_proto_rawDescData)
	})
	return file_cvnetv2_proto_rawDescData
}

var file_cvnetv2_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cvnetv2_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_cvnetv2_proto_goTypes = []interface{}{
	(ConfigMessage_Mode)(0),     // 0: cvnet2.ConfigMessage.Mode
	(ConfigMessage_Range)(0),    // 1: cvnet2.ConfigMessage.Range
	(*CVMessage)(nil),           // 2: cvnet2.CVMessage
	(*GateMessage)(nil),         // 3: cvnet2.GateMessage
	(*ConfigMessage)(nil),       // 4: cvnet2.ConfigMessage
	(*timestamp.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_cvnetv2_proto_depIdxs = []int32{
	5,  // 0: cvnet2.CVMessage.Timestamp:type_name -> google.protobuf.Timestamp
	5,  // 1: cvnet2.GateMessage.Timestamp:type_name -> google.protobuf.Timestamp
	0,  // 2: cvnet2.ConfigMessage.mode:type_name -> cvnet2.ConfigMessage.Mode
	1,  // 3: cvnet2.ConfigMessage.range:type_name -> cvnet2.ConfigMessage.Range
	4,  // 4: cvnet2.CV.PinMode:input_type -> cvnet2.ConfigMessage
	2,  // 5: cvnet2.CV.readCV:input_type -> cvnet2.CVMessage
	2,  // 6: cvnet2.CV.writeCV:input_type -> cvnet2.CVMessage
	3,  // 7: cvnet2.CV.readGate:input_type -> cvnet2.GateMessage
	3,  // 8: cvnet2.CV.writeGate:input_type -> cvnet2.GateMessage
	2,  // 9: cvnet2.CV.readCVStream:input_type -> cvnet2.CVMessage
	2,  // 10: cvnet2.CV.writeCVStream:input_type -> cvnet2.CVMessage
	3,  // 11: cvnet2.CV.readGateStream:input_type -> cvnet2.GateMessage
	3,  // 12: cvnet2.CV.writeGateStream:input_type -> cvnet2.GateMessage
	4,  // 13: cvnet2.CV.PinMode:output_type -> cvnet2.ConfigMessage
	2,  // 14: cvnet2.CV.readCV:output_type -> cvnet2.CVMessage
	2,  // 15: cvnet2.CV.writeCV:output_type -> cvnet2.CVMessage
	3,  // 16: cvnet2.CV.readGate:output_type -> cvnet2.GateMessage
	3,  // 17: cvnet2.CV.writeGate:output_type -> cvnet2.GateMessage
	2,  // 18: cvnet2.CV.readCVStream:output_type -> cvnet2.CVMessage
	2,  // 19: cvnet2.CV.writeCVStream:output_type -> cvnet2.CVMessage
	3,  // 20: cvnet2.CV.readGateStream:output_type -> cvnet2.GateMessage
	3,  // 21: cvnet2.CV.writeGateStream:output_type -> cvnet2.GateMessage
	13, // [13:22] is the sub-list for method output_type
	4,  // [4:13] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_cvnetv2_proto_init() }
func file_cvnetv2_proto_init() {
	if File_cvnetv2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cvnetv2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cvnetv2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cvnetv2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cvnetv2_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cvnetv2_proto_goTypes,
		DependencyIndexes: file_cvnetv2_proto_depIdxs,
		EnumInfos:         file_cvnetv2_proto_enumTypes,
		MessageInfos:      file_cvnetv2_proto_msgTypes,
	}.Build()
	File_cvnetv2_proto = out.File
	file_cvnetv2_proto_rawDesc = nil
	file_cvnetv2_proto_goTypes = nil
	file_cvnetv2_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CVClient is the client API for CV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CVClient interface {
	PinMode(ctx context.Context, in *ConfigMessage, opts ...grpc.CallOption) (*ConfigMessage, error)
	ReadCV(ctx context.Context, in *CVMessage, opts ...grpc.CallOption) (*CVMessage, error)
	WriteCV(ctx context.Context, in *CVMessage, opts ...grpc.CallOption) (*CVMessage, error)
	ReadGate(ctx context.Context, in *GateMessage, opts ...grpc.CallOption) (*GateMessage, error)
	WriteGate(ctx context.Context, in *GateMessage, opts ...grpc.CallOption) (*GateMessage, error)
	ReadCVStream(ctx context.Context, in *CVMessage, opts ...grpc.CallOption) (CV_ReadCVStreamClient, error)
	WriteCVStream(ctx context.Context, opts ...grpc.CallOption) (CV_WriteCVStreamClient, error)
	ReadGateStream(ctx context.Context, in *GateMessage, opts ...grpc.CallOption) (CV_ReadGateStreamClient, error)
	WriteGateStream(ctx context.Context, opts ...grpc.CallOption) (CV_WriteGateStreamClient, error)
}

type cVClient struct {
	cc grpc.ClientConnInterface
}

func NewCVClient(cc grpc.ClientConnInterface) CVClient {
	return &cVClient{cc}
}

func (c *cVClient) PinMode(ctx context.Context, in *ConfigMessage, opts ...grpc.CallOption) (*ConfigMessage, error) {
	out := new(ConfigMessage)
	err := c.cc.Invoke(ctx, "/cvnet2.CV/PinMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cVClient) ReadCV(ctx context.Context, in *CVMessage, opts ...grpc.CallOption) (*CVMessage, error) {
	out := new(CVMessage)
	err := c.cc.Invoke(ctx, "/cvnet2.CV/readCV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cVClient) WriteCV(ctx context.Context, in *CVMessage, opts ...grpc.CallOption) (*CVMessage, error) {
	out := new(CVMessage)
	err := c.cc.Invoke(ctx, "/cvnet2.CV/writeCV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cVClient) ReadGate(ctx context.Context, in *GateMessage, opts ...grpc.CallOption) (*GateMessage, error) {
	out := new(GateMessage)
	err := c.cc.Invoke(ctx, "/cvnet2.CV/readGate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cVClient) WriteGate(ctx context.Context, in *GateMessage, opts ...grpc.CallOption) (*GateMessage, error) {
	out := new(GateMessage)
	err := c.cc.Invoke(ctx, "/cvnet2.CV/writeGate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cVClient) ReadCVStream(ctx context.Context, in *CVMessage, opts ...grpc.CallOption) (CV_ReadCVStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CV_serviceDesc.Streams[0], "/cvnet2.CV/readCVStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cVReadCVStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CV_ReadCVStreamClient interface {
	Recv() (*CVMessage, error)
	grpc.ClientStream
}

type cVReadCVStreamClient struct {
	grpc.ClientStream
}

func (x *cVReadCVStreamClient) Recv() (*CVMessage, error) {
	m := new(CVMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cVClient) WriteCVStream(ctx context.Context, opts ...grpc.CallOption) (CV_WriteCVStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CV_serviceDesc.Streams[1], "/cvnet2.CV/writeCVStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cVWriteCVStreamClient{stream}
	return x, nil
}

type CV_WriteCVStreamClient interface {
	Send(*CVMessage) error
	CloseAndRecv() (*CVMessage, error)
	grpc.ClientStream
}

type cVWriteCVStreamClient struct {
	grpc.ClientStream
}

func (x *cVWriteCVStreamClient) Send(m *CVMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cVWriteCVStreamClient) CloseAndRecv() (*CVMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CVMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cVClient) ReadGateStream(ctx context.Context, in *GateMessage, opts ...grpc.CallOption) (CV_ReadGateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CV_serviceDesc.Streams[2], "/cvnet2.CV/readGateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cVReadGateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CV_ReadGateStreamClient interface {
	Recv() (*GateMessage, error)
	grpc.ClientStream
}

type cVReadGateStreamClient struct {
	grpc.ClientStream
}

func (x *cVReadGateStreamClient) Recv() (*GateMessage, error) {
	m := new(GateMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cVClient) WriteGateStream(ctx context.Context, opts ...grpc.CallOption) (CV_WriteGateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CV_serviceDesc.Streams[3], "/cvnet2.CV/writeGateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cVWriteGateStreamClient{stream}
	return x, nil
}

type CV_WriteGateStreamClient interface {
	Send(*GateMessage) error
	CloseAndRecv() (*GateMessage, error)
	grpc.ClientStream
}

type cVWriteGateStreamClient struct {
	grpc.ClientStream
}

func (x *cVWriteGateStreamClient) Send(m *GateMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cVWriteGateStreamClient) CloseAndRecv() (*GateMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GateMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CVServer is the server API for CV service.
type CVServer interface {
	PinMode(context.Context, *ConfigMessage) (*ConfigMessage, error)
	ReadCV(context.Context, *CVMessage) (*CVMessage, error)
	WriteCV(context.Context, *CVMessage) (*CVMessage, error)
	ReadGate(context.Context, *GateMessage) (*GateMessage, error)
	WriteGate(context.Context, *GateMessage) (*GateMessage, error)
	ReadCVStream(*CVMessage, CV_ReadCVStreamServer) error
	WriteCVStream(CV_WriteCVStreamServer) error
	ReadGateStream(*GateMessage, CV_ReadGateStreamServer) error
	WriteGateStream(CV_WriteGateStreamServer) error
}

// UnimplementedCVServer can be embedded to have forward compatible implementations.
type UnimplementedCVServer struct {
}

func (*UnimplementedCVServer) PinMode(context.Context, *ConfigMessage) (*ConfigMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinMode not implemented")
}
func (*UnimplementedCVServer) ReadCV(context.Context, *CVMessage) (*CVMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCV not implemented")
}
func (*UnimplementedCVServer) WriteCV(context.Context, *CVMessage) (*CVMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteCV not implemented")
}
func (*UnimplementedCVServer) ReadGate(context.Context, *GateMessage) (*GateMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadGate not implemented")
}
func (*UnimplementedCVServer) WriteGate(context.Context, *GateMessage) (*GateMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteGate not implemented")
}
func (*UnimplementedCVServer) ReadCVStream(*CVMessage, CV_ReadCVStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadCVStream not implemented")
}
func (*UnimplementedCVServer) WriteCVStream(CV_WriteCVStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteCVStream not implemented")
}
func (*UnimplementedCVServer) ReadGateStream(*GateMessage, CV_ReadGateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadGateStream not implemented")
}
func (*UnimplementedCVServer) WriteGateStream(CV_WriteGateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteGateStream not implemented")
}

func RegisterCVServer(s *grpc.Server, srv CVServer) {
	s.RegisterService(&_CV_serviceDesc, srv)
}

func _CV_PinMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CVServer).PinMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cvnet2.CV/PinMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CVServer).PinMode(ctx, req.(*ConfigMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CV_ReadCV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CVMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CVServer).ReadCV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cvnet2.CV/ReadCV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CVServer).ReadCV(ctx, req.(*CVMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CV_WriteCV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CVMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CVServer).WriteCV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cvnet2.CV/WriteCV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CVServer).WriteCV(ctx, req.(*CVMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CV_ReadGate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CVServer).ReadGate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cvnet2.CV/ReadGate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CVServer).ReadGate(ctx, req.(*GateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CV_WriteGate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CVServer).WriteGate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cvnet2.CV/WriteGate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CVServer).WriteGate(ctx, req.(*GateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CV_ReadCVStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CVMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CVServer).ReadCVStream(m, &cVReadCVStreamServer{stream})
}

type CV_ReadCVStreamServer interface {
	Send(*CVMessage) error
	grpc.ServerStream
}

type cVReadCVStreamServer struct {
	grpc.ServerStream
}

func (x *cVReadCVStreamServer) Send(m *CVMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CV_WriteCVStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CVServer).WriteCVStream(&cVWriteCVStreamServer{stream})
}

type CV_WriteCVStreamServer interface {
	SendAndClose(*CVMessage) error
	Recv() (*CVMessage, error)
	grpc.ServerStream
}

type cVWriteCVStreamServer struct {
	grpc.ServerStream
}

func (x *cVWriteCVStreamServer) SendAndClose(m *CVMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cVWriteCVStreamServer) Recv() (*CVMessage, error) {
	m := new(CVMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CV_ReadGateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GateMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CVServer).ReadGateStream(m, &cVReadGateStreamServer{stream})
}

type CV_ReadGateStreamServer interface {
	Send(*GateMessage) error
	grpc.ServerStream
}

type cVReadGateStreamServer struct {
	grpc.ServerStream
}

func (x *cVReadGateStreamServer) Send(m *GateMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CV_WriteGateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CVServer).WriteGateStream(&cVWriteGateStreamServer{stream})
}

type CV_WriteGateStreamServer interface {
	SendAndClose(*GateMessage) error
	Recv() (*GateMessage, error)
	grpc.ServerStream
}

type cVWriteGateStreamServer struct {
	grpc.ServerStream
}

func (x *cVWriteGateStreamServer) SendAndClose(m *GateMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cVWriteGateStreamServer) Recv() (*GateMessage, error) {
	m := new(GateMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cvnet2.CV",
	HandlerType: (*CVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PinMode",
			Handler:    _CV_PinMode_Handler,
		},
		{
			MethodName: "readCV",
			Handler:    _CV_ReadCV_Handler,
		},
		{
			MethodName: "writeCV",
			Handler:    _CV_WriteCV_Handler,
		},
		{
			MethodName: "readGate",
			Handler:    _CV_ReadGate_Handler,
		},
		{
			MethodName: "writeGate",
			Handler:    _CV_WriteGate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "readCVStream",
			Handler:       _CV_ReadCVStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "writeCVStream",
			Handler:       _CV_WriteCVStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "readGateStream",
			Handler:       _CV_ReadGateStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "writeGateStream",
			Handler:       _CV_WriteGateStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "cvnetv2.proto",
}
